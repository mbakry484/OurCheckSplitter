// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OurCheckSplitter.Api.Data;

#nullable disable

namespace OurCheckSplitter.Api.Migrations
{
    [DbContext(typeof(OurCheckSplitterContext))]
    partial class OurCheckSplitterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.FriendAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FriendId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemAssignmentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.HasIndex("ItemAssignmentId");

                    b.ToTable("FriendAssignments");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.ItemAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Unitlabel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ItemAssignments");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Tax")
                        .HasColumnType("REAL");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Tips")
                        .HasColumnType("REAL");

                    b.Property<bool>("TipsIncludedInTotal")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Friend", b =>
                {
                    b.HasOne("OurCheckSplitter.Api.Entities.Receipt", "Receipt")
                        .WithMany("Friends")
                        .HasForeignKey("ReceiptId");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.FriendAssignment", b =>
                {
                    b.HasOne("OurCheckSplitter.Api.Entities.Friend", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurCheckSplitter.Api.Entities.ItemAssignment", "ItemAssignment")
                        .WithMany("FriendAssignments")
                        .HasForeignKey("ItemAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("ItemAssignment");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Item", b =>
                {
                    b.HasOne("OurCheckSplitter.Api.Entities.Receipt", null)
                        .WithMany("Items")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.ItemAssignment", b =>
                {
                    b.HasOne("OurCheckSplitter.Api.Entities.Item", "Item")
                        .WithMany("Assignments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OurCheckSplitter.Api.Entities.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Item", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.ItemAssignment", b =>
                {
                    b.Navigation("FriendAssignments");
                });

            modelBuilder.Entity("OurCheckSplitter.Api.Entities.Receipt", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
